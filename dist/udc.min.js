!function(a,b){"object"==typeof exports?module.exports=b():"function"==typeof define&&define.amd?define([],b):a.UDC=b()}(this,function(){var a={};return a.Cube=function(a){function b(a){return Object.keys(a).sort().map(function(b){var c=a[b];return c.codeList+":"+c.code}).join(",")}var c={};return a.rows.forEach(function(d){var e={},f={};a.dimensionColumns.forEach(function(a){e[a.dimension]={codeList:a.codeList,code:d[a.column]}}),a.measureColumns.forEach(function(a){f[a.measure]=d[a.column]*a.scale}),c[b(e)]=f}),{value:function(a,d){return c[b(a)][d]},observations:a.rows}},a.Concordance=function(a){var b={},c=[],d=a.dimensionColumns[0].dimension;return a.dimensionColumns.forEach(function(a){var d=a.codeList;c.push(d),b[d]={}}),a.rows.forEach(function(c){var d={};a.dimensionColumns.forEach(function(a){var e=a.codeList,f=c[a.column];d[e]={codeList:e,code:f},b[e][f]=d})}),{translate:function(a,c){return b[a.codeList][a.code][c]},codeLists:c,dimension:d}},a.mergeCubes=function(){function a(a,b){var c={};return c[b.dimension]=b.codeLists.sort()[0],{dimensions:a.dimensions,measures:a.measures,observations:a.observations.map(function(d){var e={};return a.dimensions.forEach(function(a){var f=d.cell[a],g=c[a];e[a]=b.translate(f,g)}),{cell:e,values:d.values}})}}function b(){}return function(c,d,e){var f=a(c,e),g=a(d,e);return console.log(f),b(f,g)}}(),a});